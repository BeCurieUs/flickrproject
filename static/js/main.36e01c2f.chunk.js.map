{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["myapi_key","App","state","user_id","printCollection","completePhotostream","searchFlickr","fetch","concat","_this","then","response","json","data","photosets","photoset","forEach","photoCollection","index","id","innerResponse","innerData","setState","Object","toConsumableArray","title","_content","farm","primary","server","secret","photos","photo","printImageList","flickrImageArray","imageObject","imgPath","react_default","a","createElement","key","className","src","alt","getSize","undefined","props","size","urlGenerator","this","_this2","onSubmit","handleSubmit","type","value","searchTerm","onChange","handleChange","map","photoAlbumb","Card_default","CardMedia_default","image","CardContent_default","Typography_default","variant","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36e01c2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import Flickrimg from \"./componets/Flickrimg\"\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\nconst myapi_key = \"3347f47687a578f9048de57e5561217f\";\nconst api_secret = \"5c9d856058d4cd88\"\n\n\nclass App extends Component {\n\n  state = {\n    user_id : \"11860006@N08\",\n    printCollection : [],\n    completePhotostream : [],\n  }\n\n  componentDidMount() {\n    this.searchFlickr();\n  }\n\n\n  searchFlickr = () =>{\n    fetch(`https://api.flickr.com/services/rest/?method=flickr.photosets.getList&api_key=${myapi_key}&user_id=${this.state.user_id}&format=json&nojsoncallback=1`)\n    .then(response => response.json())\n    .then(data => {\n      // console.log(JSON.stringify(data, null, 2))\n      data.photosets.photoset.forEach( (photoCollection,index) => {\n        fetch(`https://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos&api_key=${myapi_key}&photoset_id=${photoCollection.id}&format=json&nojsoncallback=1`)\n        .then(innerResponse => innerResponse.json())\n        .then(innerData => {\n          // console.log(photoCollection.title._content)\n          // console.log(innerData.photoset.photo)\n          this.setState({\n            completePhotostream : [...this.state.completePhotostream,{title : photoCollection.title._content, farm:photoCollection.farm, id:photoCollection.primary, server:photoCollection.server, secret:photoCollection.secret , photos : innerData.photoset.photo}]\n          })\n        })\n      });\n      // console.log(this.state.collectionsList)\n      // this.printImageList(this.state.collectionsList)\n    })\n  }\n\n  printImageList = (flickrImageArray) =>{\n    flickrImageArray.forEach((imageObject,index)=>{\n      const imgPath = `https://farm${imageObject.farm}.staticflickr.com/${imageObject.server}/${imageObject.id}_${imageObject.secret}_q.jpg`\n      // console.log(imgPath)\n      this.setState({printCollection : [...this.state.printCollection,<img key={index} className=\"responsive-image\" src={imgPath} alt={imageObject.title._content}/>]})\n      \n\n    })\n  }\n\n  // image tag search code\n\n  // searchFlickr = () =>{\n  //   fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${myapi_key}&tags=${this.state.searchTerm}&per_page=50&page=1&format=json&nojsoncallback=1`)\n  //   .then(response => response.json())\n  //   .then(data => {\n  //     data.photos.photo.forEach((picItem,index) => {\n  //       const imgPath = `https://farm${picItem.farm}.staticflickr.com/${picItem.server}/${picItem.id}_${picItem.secret}_m.jpg`\n  //       this.setState({picList: [...this.state.picList,\n  //         <a key = {index} target=\"_blank\" href={`https://farm${picItem.farm}.staticflickr.com/${picItem.server}/${picItem.id}_${picItem.secret}.jpg`}>\n  //           <img key={index} className=\"responsive-image\" src={imgPath} alt={picItem.title}/>\n  //         </a>\n  //         ]})\n  //     });\n  //   })\n  // }\n\n  // handleSubmit= (event) => {\n  //   event.preventDefault();\n  //   this.setState({searchTerm :event.target.value}) \n  // }\n  getSize = () =>{\n    if(this.props.size!==undefined){\n      return \"_\"+this.props.size\n    }\n    return \"\";\n  }\n\n  urlGenerator = (farm,server,id,secret,size) => {\n    return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}${this.getSize()}.jpg`\n  }\n\n\n  // handleChange = (event) =>{\n  //   this.setState({searchTerm: event.target.value});\n  // }\n\n  // handleSubmit = (event) =>{\n  //   event.preventDefault();\n  //   this.setState({picList:[]})\n  //   this.searchFlickr();\n  // }\n\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"form\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Enter Your Flickr User ID:\n            <input type=\"text\" value={this.state.searchTerm} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\"/>\n          </form>\n        </div>\n        <div className=\"photoCollections\">\n          {this.state.completePhotostream.map((photoAlbumb,index) => { \n            return (\n            <Card className=\"collection-card\">\n              <CardMedia\n                className=\"collection-card-media\"\n                image={this.urlGenerator(photoAlbumb.farm, photoAlbumb.server,\n                  photoAlbumb.id, photoAlbumb.secret,\"q\")}\n                title={photoAlbumb.title}\n              />\n              {/* <Flickrimg farm={photoAlbumb.farm} server={photoAlbumb.server}\n                id={photoAlbumb.id} secret={photoAlbumb.secret} title={photoAlbumb.title}\n                size=\"q\">\n              </Flickrimg> */}\n              <CardContent className=\"title-card\">\n                <Typography variant=\"title\" >{photoAlbumb.title}</Typography>\n              </CardContent>\n            </Card>);\n          })}\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}